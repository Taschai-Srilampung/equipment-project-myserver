import React, { useState, useEffect } from 'react';
import { Table, Button, Popconfirm, message } from 'antd';
import { Link } from 'react-router-dom';

const RequestManagement = () => {
  const API_URL = import.meta.env.VITE_API_URL;
  const [showChangeLocation, setShowChangeLocation] = useState(true);
  const [showReturnEquipment, setShowReturnEquipment] = useState(false);
  const [dataChangeLocation, setDataChangeLocation] = useState([]);
  const [dataReturnEquipment, setDataReturnEquipment] = useState([
    {
      key: '1',
      date: '1 มิ.ย. 2567',
      reportedBy: 'N/A',
      equipmentNumber: '34134231421',
      equipmentName: 'เครื่องทำแห้งแบบสุญญากาศ',
      returnReason: 'คณะลงความเห็นไม่ควรซ่อมเนื่องจากอายุการใช้งานกับราคาซ่อม...',
      file: '/path/to/file.pdf',
    },
    // Add more data as needed
  ]);

  useEffect(() => {
    const fetchChangeLocationData = async () => {
      try {
        const response = await fetch(`${API_URL}/api/request-change-locations?populate[inventories][populate]=building&populate=building`);
        const result = await response.json();
        const formattedData = result.data.map(item => {
          const inventoryData = item.attributes.inventories.data.map(inventory => ({
            key: inventory.id,
            equipmentName: inventory.attributes.name,
            equipmentNumber: inventory.attributes.id_inv,
            oldLocation: {
              building: inventory.attributes.building?.data?.attributes?.buildingName || 'N/A',
              floor: inventory.attributes.floor || 'N/A',
              room: inventory.attributes.room || 'N/A'
            },
            newLocation: {
              building: item.attributes.building.data.attributes.buildingName,
              floor: item.attributes.NewLocationFloor,
              room: item.attributes.NewLocationRoom
            }
          }));
          return {
            key: item.id,
            date: new Date(item.attributes.createdAt).toLocaleDateString('th-TH', { year: 'numeric', month: 'long', day: 'numeric' }),
            reportedBy: 'N/A', // เปลี่ยนตามข้อมูลที่มีใน response
            inventoryData
          };
        });
        setDataChangeLocation(formattedData);
      } catch (error) {
        console.error("Error fetching data:", error);
        message.error("ไม่สามารถดึงข้อมูลได้");
      }
    };

    fetchChangeLocationData();
  }, []);

  const handleToggleChangeLocation = () => {
    setShowChangeLocation(true);
    setShowReturnEquipment(false);
  };

  const handleToggleReturnEquipment = () => {
    setShowChangeLocation(false);
    setShowReturnEquipment(true);
  };

  const handleApprove = (key) => {
    message.success(`อนุญาตคำร้องหมายเลข ${key}`);
  };

  const handleDisapprove = (key) => {
    message.error(`ไม่อนุญาตคำร้องหมายเลข ${key}`);
  };

  const expandedRowRender = (record) => {
    const columns = [
      { title: 'ชื่อครุภัณฑ์', dataIndex: 'equipmentName', key: 'equipmentName' },
      { title: 'หมายเลขครุภัณฑ์', dataIndex: 'equipmentNumber', key: 'equipmentNumber' },
      {
        title: 'ที่ตั้งเดิม',
        children: [
          { title: 'อาคาร', dataIndex: ['oldLocation', 'building'], key: 'oldLocationBuilding' },
          { title: 'ชั้น', dataIndex: ['oldLocation', 'floor'], key: 'oldLocationFloor' },
          { title: 'ห้อง', dataIndex: ['oldLocation', 'room'], key: 'oldLocationRoom' },
        ],
      },
      {
        title: 'ที่ตั้งใหม่',
        children: [
          { title: 'อาคาร', dataIndex: ['newLocation', 'building'], key: 'newLocationBuilding' },
          { title: 'ชั้น', dataIndex: ['newLocation', 'floor'], key: 'newLocationFloor' },
          { title: 'ห้อง', dataIndex: ['newLocation', 'room'], key: 'newLocationRoom' },
        ],
      },
    ];
    return (
      <div className="bg-sky-100 p-4 rounded">
        <Table columns={columns} dataSource={record.inventoryData} pagination={false} />
      </div>
    );
  };

  const columnsChangeLocation = [
    {
      title: 'วันที่แจ้ง',
      dataIndex: 'date',
      key: 'date',
    },
    {
      title: 'แจ้งโดย',
      dataIndex: 'reportedBy',
      key: 'reportedBy',
    },
    {
      title: 'การกระทำ',
      key: 'action',
      render: (_, record) => (
        <div className="flex space-x-2">
          <Button type="primary" className="bg-blue-500 text-white" onClick={() => handleApprove(record.key)}>เปลี่ยนที่ตั้ง</Button>
          {/* <Popconfirm
            title="คุณแน่ใจหรือไม่ที่จะไม่อนุญาตรายการนี้?"
            onConfirm={() => handleDisapprove(record.key)}
          >
            <Button type="danger" className="bg-red-500 text-white">
              ไม่อนุญาต
            </Button>
          </Popconfirm> */}
        </div>
      ),
    },
  ];

  const columnsReturnEquipment = [
    {
      title: 'วันที่แจ้ง',
      dataIndex: 'date',
      key: 'date',
    },
    {
      title: 'แจ้งโดย',
      dataIndex: 'reportedBy',
      key: 'reportedBy',
    },
    {
      title: 'หมายเลขครุภัณฑ์',
      dataIndex: 'equipmentNumber',
      key: 'equipmentNumber',
    },
    {
      title: 'ชื่อครุภัณฑ์',
      dataIndex: 'equipmentName',
      key: 'equipmentName',
    },
    {
      title: 'เหตุผลการส่งคืน',
      dataIndex: 'returnReason',
      key: 'returnReason',
    },
    {
      title: 'ไฟล์',
      dataIndex: 'file',
      key: 'file',
      render: (text) => (
        <a href={text} target="_blank" rel="noopener noreferrer" className="text-blue-500">
          Download
        </a>
      ),
    },
    {
      title: 'การกระทำ',
      key: 'action',
      render: (_, record) => (
        <div className="flex space-x-2">
          <Button type="primary" className="bg-blue-500 text-white">ดำเนินการ</Button>
          <Popconfirm
            title="คุณแน่ใจหรือไม่ที่จะลบรายการนี้?"
            onConfirm={() => handleDeleteReturnEquipment(record.key)}
          >
            <Button type="danger" className="bg-red-500 text-white">
              ลบ
            </Button>
          </Popconfirm>
        </div>
      ),
    },
  ];

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-end mb-4">
        <Button type="primary" className="btn bg-blue-500 mx-2 text-white" onClick={handleToggleChangeLocation}>
          แสดงคำร้องขอเปลี่ยนที่ตั้ง
        </Button>
        <Button type="secondary" className="btn bg-blue-500 mx-2 text-white" onClick={handleToggleReturnEquipment}>
          แสดงคำร้องขอส่งคืนครุภัณฑ์
        </Button>
      </div>

      {showChangeLocation && (
        <div className="mb-8">
          <h2 className="text-lg font-semibold mb-2">คำร้องขอเปลี่ยนตั้ง</h2>
          <Table
            columns={columnsChangeLocation}
            dataSource={dataChangeLocation}
            expandable={{ expandedRowRender }}
            pagination={false}
            rowClassName={(record, index) => index % 2 === 0 ? 'bg-gray-50' : 'bg-white'}
          />
        </div>
      )}

      {showReturnEquipment && (
        <div>
          <h2 className="text-lg font-semibold mb-2">คำร้องขอส่งคืนครุภัณฑ์</h2>
          <Table columns={columnsReturnEquipment} dataSource={dataReturnEquipment} pagination={false} />
        </div>
      )}
    </div>
  );
};

export default RequestManagement;
